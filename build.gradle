/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

plugins {
    id 'scala'
    id 'application'
    id "org.scoverage" version "2.5.0"
    id "com.gradle.build-scan" version "1.14"
    id "cz.alenkacz.gradle.scalafmt" version "1.5.1"
}


group 'com.adobe.api.platform.runtime'
version '1.0-SNAPSHOT'
scalafmt.configFilePath = gradle.scalafmt.config

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
    publishAlwaysIf(System.getenv('CI') != null)
}

tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    outputs.upToDateWhen { false } // force tests to run every time
}


dependencies {

    compile "org.scala-lang:scala-library:${gradle.scala.version}"
    compile ('com.github.pureconfig:pureconfig_2.12:0.9.2') {
        exclude group: 'com.github.pureconfig', module: 'pureconfig-macros_2.12'
    }
    compile 'io.spray:spray-json_2.12:1.3.4'

    compile 'com.typesafe.akka:akka-actor_2.12:2.5.17'
    compile 'com.typesafe.akka:akka-stream_2.12:2.5.17'
    compile 'com.typesafe.akka:akka-stream-kafka_2.12:0.22'
    compile 'com.typesafe.akka:akka-slf4j_2.12:2.5.17'

    compile 'com.typesafe.akka:akka-http-core_2.12:10.1.5'
    compile 'com.typesafe.akka:akka-http-spray-json_2.12:10.1.5'

    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'org.slf4j:jcl-over-slf4j:1.7.25'
    compile 'org.slf4j:log4j-over-slf4j:1.7.25'

    compile ('io.kamon:kamon-core_2.12:1.1.3') {
        exclude group: 'com.lihaoyi'
    }
    compile ('io.kamon:kamon-prometheus_2.12:1.1.1'){
        exclude group: 'org.nanohttpd'
    }
    compile 'io.kamon:kamon-datadog_2.12:1.0.0'

    testCompile 'junit:junit:4.11'
    testCompile 'org.scalatest:scalatest_2.12:3.0.1'
    testCompile 'net.manub:scalatest-embedded-kafka_2.12:2.0.0'
    testCompile 'com.typesafe.akka:akka-testkit_2.12:2.5.17'
    testCompile 'com.typesafe.akka:akka-stream-testkit_2.12:2.5.17'
    testCompile 'com.typesafe.akka:akka-http-testkit_2.12:10.1.5'

    scoverage 'org.scoverage:scalac-scoverage-plugin_2.12:1.4.0-M4', 'org.scoverage:scalac-scoverage-runtime_2.12:1.4.0-M4'

}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = gradle.scala.compileFlags
}


mainClassName = 'com.adobe.api.platform.runtime.metrics.Main'

//Ensure that dist archive name does not contain version
distTar {
    archiveName = "${project.name}.tar"
}

//Avoid generating the zip files from maven installations
distZip {
    enabled false
}
